{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import os\n",
    "import json\n",
    "import numpy as np\n",
    "\n",
    "def getmin(p1,p2,p3,p4):\n",
    "    min_x =  min(p1[0],p2[0],p3[0],p4[0])\n",
    "    min_y =  min(p1[1],p2[1],p3[1],p4[1])\n",
    "    return(min_x,min_y) \n",
    "\n",
    "def getmax(p1,p2,p3,p4): \n",
    "    max_x =  max(p1[0],p2[0],p3[0],p4[0])\n",
    "    max_y =  max(p1[1],p2[1],p3[1],p4[1])\n",
    "    return(max_x,max_y)\n",
    "\n",
    "def maskimage(image, p1,p2,p3,p4):\n",
    "    mask = np.zeros(image.shape, dtype=np.uint8)\n",
    "    roi_corners = np.array([[p1,p2,p3,p4]], dtype=np.int32)\n",
    "    channel_count = image.shape[2]\n",
    "    ignore_mask_color = (255,)*channel_count\n",
    "    cv2.fillPoly(mask, roi_corners, ignore_mask_color)\n",
    "    masked_image = cv2.bitwise_and(image, mask)\n",
    "    return(masked_image)\n",
    "\n",
    "def countwhitepixels(image):\n",
    "    count = 0\n",
    "    for row in image:\n",
    "        for col in row:\n",
    "            if col == 255:\n",
    "                count = count + 1\n",
    "    return(count)\n",
    "\n",
    "def cannyedgedetection(spot, parking_space_loc):\n",
    "    sigma=0.33\n",
    "    median = np.median(spot)\n",
    "    lower_bound = int(max(0, (1.0 - sigma) * median)) \n",
    "    upper_bound = int(min(255, (1.0 + sigma) * median))\n",
    "    edges = cv2.Canny(spot,lower_bound,upper_bound)\n",
    "    white_pixels = countwhitepixels(edges)\n",
    "    dirname = 'C:\\\\Users\\\\Nitz Mistry\\\\Pictures\\\\Test_13_8\\\\EmptyEdges\\\\'\n",
    "    cv2.imwrite(dirname+parking_space_loc+'Edge.bmp', edges)\n",
    "    return white_pixels\n",
    "\n",
    "\n",
    "#load parking lot data\n",
    "with open('C:\\\\Users\\\\Nitz Mistry\\\\Pictures\\\\Test_13_8\\\\image.json') as empty_spot_data_json:\n",
    "    empty_spot_data = json.load(empty_spot_data_json)\n",
    "\n",
    "f = open(\"C:\\\\Users\\\\Nitz Mistry\\\\Pictures\\\\Test_13_8\\\\spot_data.json\", \"w\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "\n",
    "    f.writelines(['{\\n', '\\\"spots\\\": [\\n'])\n",
    "    spot_coords = empty_spot_data['shapes'] #coordinates of spots in p-lot\n",
    "\n",
    "    image = cv2.imread('C:\\\\Users\\\\Nitz Mistry\\\\Pictures\\\\Test_13_8\\\\image.jpg')\n",
    "        \n",
    "    spot_num = 1\n",
    "    for parking_spot in spot_coords:\n",
    "        parking_space_loc = 'Space_#_'+str(parking_spot['label'])\n",
    "        #print(parking_space_loc)\n",
    "        points=parking_spot['points']\n",
    "        \n",
    "        p1 = (int(points[0][0]),int(points[0][1]))\n",
    "        p2 = (int(points[1][0]),int(points[1][1]))    \n",
    "        p3 = (int(points[2][0]),int(points[2][1]))\n",
    "        p4 = (int(points[3][0]),int(points[3][1])) \n",
    "           \n",
    "        masked_image = maskimage(image,p1,p2,p3,p4)\n",
    "        min_point = getmin(p1,p2,p3,p4)\n",
    "        max_point = getmax(p1,p2,p3,p4)\n",
    "        masked_parking_space = masked_image[min_point[1]:max_point[1], min_point[0]:max_point[0]]\n",
    "\n",
    "        #EDGES\n",
    "        denoise = cv2.fastNlMeansDenoisingColored(masked_parking_space,None,20,21,7,31)\n",
    "        gray_image = cv2.cvtColor(denoise, cv2.COLOR_BGR2GRAY)\n",
    "        blur = cv2.GaussianBlur(gray_image,(5,5),0)\n",
    "        edges_avg = cannyedgedetection(blur, parking_space_loc)\n",
    "\n",
    "        f.write('['+str(parking_spot['label'])+', '+str(edges_avg)+']')\n",
    "        if spot_num < len(spot_coords):\n",
    "            f.write(',')\n",
    "        f.write('\\n')\n",
    "        spot_num = spot_num+1\n",
    "    f.writelines([']\\n', '}\\n'])\n",
    "    f.close()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
